@model IEnumerable<FrontEnd.Controllers.NoteVM>

@{
    ViewData["Title"] = "Dashboard";
}



<!-- Including Bootstrap CSS for styling -->
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Custom styling -->
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 20px;
    }

    .card-container {
        display: flex;
        justify-content: space-around;
        margin-bottom: 20px;
    }

    .card {
        width: 20%;
        padding: 20px;
        background-color: #f1f1f1;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .note-section {
        margin-bottom: 20px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .note {
        padding: 10px;
        margin: 5px 0;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #fff;
    }

    .note a {
        color: #007bff;
        text-decoration: none;
    }

    .navbar {
        margin-bottom: 20px;
    }

    .navbar-custom {
        background-color: #2C3E50; /* Deep Blue */
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    }

    .navbar-brand {
        color: #F39C12 !important; /* Gold */
        font-size: 1.5rem;
        font-weight: bold;
        transition: color 0.3s;
    }

    .navbar-brand:hover {
        color: #FFD700 !important; /* Brighter Gold */
    }

    .nav-link {
        color: white !important;
        font-weight: 500;
        transition: color 0.3s ease-in-out;
    }

    .nav-link:hover {
        color: #F39C12 !important; /* Gold */
    }

    .btn-create {
        background-color: #F39C12;
        border: none;
        color: white;
        font-weight: bold;
    }

    .btn-create:hover {
        background-color: #FFD700; /* Brighter Gold */
        color: black;
    }

    .btn-logout {
        background-color: #E74C3C; /* Red */
        border: none;
        color: white;
        font-weight: bold;
    }

    .btn-logout:hover {
        background-color: #C0392B; /* Darker Red */
    }
</style>

<!-- Navigation Bar -->
<nav class="navbar navbar-expand-lg navbar-custom">
    <div class="container">
        <a class="navbar-brand" href="#">📒 Notes Manager</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link btn btn-create px-4 me-3" href="/Notes/Create">➕ Create Note</a>
                </li>
                <li class="nav-item">
                    <button class="btn btn-logout px-4" onclick="logout()">🚪 Logout</button>
                </li>
            </ul>
        </div>
    </div>
</nav>

<!-- Filter Dropdown -->
<div class="mb-3">
    <select id="filterSelect" class="form-control" onchange="filterNotes()">
        <option value="all">All</option>
        <option value="today">Today</option>
        <option value="week">This Week</option>
        <option value="month">This Month</option>
    </select>
</div>

<!-- Main Content -->
<div class="container">
    <!-- Cards for Note Types -->
    <div class="card-container">
        <div class="card" id="regular-card">
            <h3>Regular Note</h3>
            <p id="regular-count">0</p>
        </div>
        <div class="card" id="reminder-card">
            <h3>Reminder</h3>
            <p id="reminder-count">0</p>
        </div>
        <div class="card" id="task-card">
            <h3>To do</h3>
            <p id="task-count">0</p>
        </div>
        <div class="card" id="bookmark-card">
            <h3>Bookmark</h3>
            <p id="bookmark-count">0</p>
        </div>
    </div>

    <!-- Notes Section -->
    <div id="notes-container">
        <!-- Notes will be loaded here dynamically -->
    </div>
</div>

<!-- Modal for creating/editing notes -->
<div class="modal" tabindex="-1" role="dialog" id="noteModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Note</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="noteForm">
                    <div class="form-group">
                        <label for="noteText">Note Text</label>
                        <input type="text" class="form-control" id="noteText" placeholder="Enter note text" required>
                    </div>

                    <!-- Conditional fields for different note types -->
                    <div id="reminderFields" style="display: none;">
                        <label for="reminderDate">Reminder Date</label>
                        <input type="datetime-local" class="form-control" id="reminderDate">
                    </div>

                    <div id="taskFields" style="display: none;">
                        <label for="dueDate">Due Date</label>
                        <input type="datetime-local" class="form-control" id="dueDate">
                        <label for="isCompleted">Task Completed</label>
                        <select class="form-control" id="isCompleted">
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </div>

                    <div id="bookmarkFields" style="display: none;">
                        <label for="bookmarkUrl">Bookmark URL</label>
                        <input type="url" class="form-control" id="bookmarkUrl" placeholder="Enter URL">
                    </div>

                    <div class="form-group">
                        <label for="noteType">Note Type</label>
                        <select class="form-control" id="noteType" onchange="toggleFields()">
                            <option value="0">Regular Notes</option>
                            <option value="1">Reminder</option>
                            <option value="2">To do</option>
                            <option value="3">Bookmark</option>
                        </select>
                    </div>

                    <button type="submit" class="btn btn-primary">Save Note</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
    const token = localStorage.getItem("jwtToken");
    if (!token) {
        console.error("No JWT token found!");
        return;
    }

    fetch("https://localhost:7237/api/Notes", {
        method: "GET",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        }
    })
    .then(response => {
        if (!response.ok) throw new Error("Unauthorized - Invalid Token");
        return response.json();
    })
    .then(notes => {
        if (!Array.isArray(notes) || notes.length === 0) {
            document.getElementById("notes-container").innerHTML = "<p>No notes available.</p>";
            return;
        }

        renderNotes(notes); // Show all notes initially
    })
    .catch(error => console.error("Error fetching notes:", error));
});

// Function to render all notes and update counts
function renderNotes(notes) {
    let notesContainer = document.getElementById("notes-container");
    notesContainer.innerHTML = "";

    // Initialize counters
    let regularCount = 0;
    let reminderCount = 0;
    let taskCount = 0;
    let bookmarkCount = 0;

    notes.forEach(note => {
        let noteDiv = document.createElement("div");
        noteDiv.classList.add("note");
        noteDiv.setAttribute("data-type", note.type); // Store type for filtering

        let noteTypeText = '';
        switch (note.type) {
            case 0: noteTypeText = 'Regular'; break;
            case 1: noteTypeText = 'Reminder'; break;
            case 2: noteTypeText = 'Task'; break;
            case 3: noteTypeText = 'Bookmark'; break;
        }

        noteDiv.innerHTML = `
            <p><strong>Type:</strong> ${noteTypeText}</p>
            <p><strong>User:</strong> ${note.userEmail}</p>
            <p><strong>${note.text}</strong></p>
            ${note.reminderDateTime ? `<p class="reminder-date" data-date="${note.reminderDateTime}">Reminder: ${new Date(note.reminderDateTime).toLocaleString()}</p>` : ''}
            ${note.dueDateTime ? `<p class="due-date" data-date="${note.dueDateTime}">Due Date: ${new Date(note.dueDateTime).toLocaleString()}</p>` : ''}
            ${note.isTaskCompleted !== null ? `<p>Task Completed: ${note.isTaskCompleted ? 'Yes' : 'No'}</p>` : ''}
            ${note.bookmarkUrl ? `<p>Bookmark: <a href="${note.bookmarkUrl}" target="_blank">${note.bookmarkUrl}</a></p>` : ''}
        `;

        notesContainer.appendChild(noteDiv);

        // **Only count Reminder & Task notes if they have valid dates**
        if (note.type === 1 && note.reminderDateTime) reminderCount++; // Reminder
        else if (note.type === 2 && note.dueDateTime) taskCount++; // Task
        else if (note.type === 3) bookmarkCount++; // Bookmark (Always count)
        else if (note.type === 0) regularCount++; // Regular (Always count)
    });

    // Update UI counts
    document.getElementById("regular-count").innerText = regularCount;
    document.getElementById("reminder-count").innerText = reminderCount;
    document.getElementById("task-count").innerText = taskCount;
    document.getElementById("bookmark-count").innerText = bookmarkCount;
}

// Function to filter only Task & Reminder notes

// Function to filter only Task & Reminder notes
// Function to filter only Task & Reminder notes
function filterNotes() {
    const filterValue = document.getElementById("filterSelect")?.value;
    if (!filterValue) return;

    const today = new Date();
    today.setHours(0, 0, 0, 0); // Normalize today's date

    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() - today.getDay()); // Start of the current week (Sunday)

    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6); // End of the current week (Saturday)

    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1); // Start of the current month
    const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0); // End of the current month

    document.querySelectorAll(".note").forEach(note => {
        const noteType = parseInt(note.getAttribute("data-type")); // Get the note type
        const reminderDateElem = note.querySelector(".reminder-date");
        const taskDueDateElem = note.querySelector(".due-date");

        let noteDate = null;

        if (reminderDateElem) {
            // Parse the reminder date
            noteDate = new Date(reminderDateElem.getAttribute("data-date"));
        } else if (taskDueDateElem) {
            // For tasks, use due date
            noteDate = new Date(taskDueDateElem.getAttribute("data-date"));
        }

        // **Regular & Bookmark types always remain visible**
        if (noteType === 0 || noteType === 3) {
            note.style.display = "block";
            return;
        }

        // **Reminder Filtering Logic**
        if (noteType === 1 && reminderDateElem) { // Reminder notes only
            if (filterValue === "today" && noteDate >= today && noteDate < new Date(today.getTime() + 24 * 60 * 60 * 1000)) {
                note.style.display = "block";
            } else if (filterValue === "week" && noteDate >= startOfWeek && noteDate <= endOfWeek) {
                note.style.display = "block";
            } else if (filterValue === "month" && noteDate >= startOfMonth && noteDate <= endOfMonth) {
                note.style.display = "block";
            } else {
                note.style.display = "none"; // Hide reminder if not in selected range
            }
        } else if (noteType === 2 && taskDueDateElem) { // Task notes
            if (filterValue === "today" && noteDate >= today && noteDate < new Date(today.getTime() + 24 * 60 * 60 * 1000)) {
                note.style.display = "block";
            } else if (filterValue === "week" && noteDate >= startOfWeek && noteDate <= endOfWeek) {
                note.style.display = "block";
            } else if (filterValue === "month" && noteDate >= startOfMonth && noteDate <= endOfMonth) {
                note.style.display = "block";
            } else {
                note.style.display = "none"; // Hide task if not in selected range
            }
        } else {
            note.style.display = "none"; // Hide any other type of notes
        }
    });
}

function logout() {
    const token = localStorage.getItem("jwtToken");

    if (!token) {
        console.error("No JWT token found!");
        return;
    }

    // Call the API to log out
    fetch("https://localhost:7237/api/Authentication/logout", {
        method: "POST",
        headers: {
            "Authorization": `Bearer ${token}`,
            "Content-Type": "application/json"
        }
    })
    .then(response => {
        if (response.ok) {
            // On successful logout, remove the token and redirect
            localStorage.removeItem("jwtToken");  // Remove the JWT token from localStorage (or cookies)
            alert("Logged out successfully!");
            window.location.href = "/Authentication/Login"; // Redirect to the login page
        } else {
            // If there's an error logging out
            alert("Error during logout. Please try again.");
        }
    })
    .catch(error => {
        console.error("Logout API call failed", error);
        alert("Error during logout. Please try again.");
    });
}


</script>
